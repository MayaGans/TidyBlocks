import { ICaptureOptions } from "./index";
/**
 * Options for rendering.
 */
export interface IRenderOptions {
    /**
     * Selector for the element that must appear in the DOM before capturing.
     */
    waitSelector: string;
    /**
     * Selector that is to be captured.
     * For 'renderImage' only. If omitted defaults to the value of 'waitSelector'.
     */
    captureSelector?: string;
}
/**
 * Interface to the web page renderer.
 * This component is responsible for rendering a web page to a PNG image or PDF file.
 */
export interface IWebPageRenderer {
    /**
     * Start the web page renderer.
     * For performance reasons this can be reused to render multiple web pages.
     */
    start(): void;
    /**
     * Finish the chart renderer.
     */
    end(): Promise<void>;
    /**
     * Render a web page to an image file.
     */
    renderImage(webPageUrl: string, outputFilePath: string, options: IRenderOptions): Promise<void>;
    /**
     * Render a web page to a PDF file.
     */
    renderPDF(webPageUrl: string, outputFilePath: string, options: IRenderOptions): Promise<void>;
}
/**
 * This component is responsible for rendering a web page to a PNG image or PDF file.
 */
export declare class WebPageRenderer implements IWebPageRenderer {
    /**
     * Options for capturing.
     */
    private options?;
    /**
     * Nightmare headless browser instance.
     */
    private nightmare;
    constructor(options?: ICaptureOptions);
    /**
     * Log an info message.
     */
    info(msg: string): void;
    /**
     * Log a warning message.
     */
    warn(msg: string): void;
    /**
     * Log an error message.
     */
    error(msg: string): void;
    /**
     * Start the web page renderer.
     * For performance reasons this can be reused to render multiple pages.
     */
    start(): Promise<void>;
    /**
     * Finish the chart renderer.
     */
    end(): Promise<void>;
    private preRenderCheck(options);
    /**
     * Render a web page to an image file.
     */
    renderImage(webPageUrl: string, outputFilePath: string, options: IRenderOptions): Promise<void>;
    /**
     * Render a web page to a PDF file.
     */
    renderPDF(webPageUrl: string, outputFilePath: string, options: IRenderOptions): Promise<void>;
}
