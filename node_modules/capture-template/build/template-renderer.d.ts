import { ICaptureOptions } from "./index";
/**
 * Interface to the template renderer.
 * This component is responsible for pretty much everything, coordinates inflating a template, starting a web server, starting Nightmare
 * navigating to the web page and then capturing the web page to a PNG or PDF.
 */
export interface ITemplateRenderer {
    /**
     * Get the URL to access the web-sever.
     */
    getUrl(): string;
    /**
     * Start the template renderer.
     * For performance reasons the template render can be reused to render multiple web pages.
     */
    start(): Promise<void>;
    /**
     * Finish the template renderer.
     */
    end(): Promise<void>;
    /**
     * Load a template render for rendering.
     *
     * @param templatePath The path to the template.
     */
    loadTemplate(data: any, templatePath: string, port: number): Promise<void>;
    /**
     * Unload current template when we are done.
     */
    unloadTemplate(): Promise<void>;
    /**
     * Render the current web page template to an image file.
     */
    renderImage(outputFilePath: string): Promise<void>;
    /**
     * Render the current web page template to a PDF file.
     */
    renderPDF(outputFilePath: string): Promise<void>;
}
/**
 * This component is responsible for pretty much everything, coordinates inflating a template, starting a web server, starting Nightmare
 * navigating to the web page and then capturing the web page to a PNG or PDF.
 */
export declare class TemplateRenderer implements ITemplateRenderer {
    /**
     * Options for capturing.
     */
    private options?;
    /**
     * Renders the web page.
     */
    private webPageRenderer;
    /**
     * Hosts the templated web page to be rendered.
     */
    private templateWebServer;
    constructor(options?: ICaptureOptions);
    /**
     * Get the URL to access the web-sever.
     */
    getUrl(): string;
    /**
     * Start the template renderer.
     * For performance reasons the template render can be reused to render multiple web pages.
     */
    start(): Promise<void>;
    /**
     * Finish the template renderer.
     */
    end(): Promise<void>;
    /**
     * Load a template render for rendering.
     *
     * @param templatePath The path to the template.
     */
    loadTemplate(templatePath: string, data: any, port: number): Promise<void>;
    /**
     * Unload current template when we are done.
     */
    unloadTemplate(): Promise<void>;
    private preRenderCheck();
    /**
     * Render the current web page template to an image file.
     */
    renderImage(outputFilePath: string): Promise<void>;
    /**
     * Render the current web page template to a PDF file.
     */
    renderPDF(outputFilePath: string): Promise<void>;
}
