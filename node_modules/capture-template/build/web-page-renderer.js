"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * This component is responsible for rendering a web page to a PNG image or PDF file.
 */
var WebPageRenderer = /** @class */ (function () {
    function WebPageRenderer(options) {
        /**
         * Nightmare headless browser instance.
         */
        this.nightmare = null;
        this.options = options;
    }
    /**
     * Log an info message.
     */
    WebPageRenderer.prototype.info = function (msg) {
        if (this.options && this.options.log) {
            this.options.log.info(msg);
        }
        else {
            console.info(msg);
        }
    };
    /**
     * Log a warning message.
     */
    WebPageRenderer.prototype.warn = function (msg) {
        if (this.options && this.options.log) {
            this.options.log.warn(msg);
        }
        else {
            console.warn(msg);
        }
    };
    /**
     * Log an error message.
     */
    WebPageRenderer.prototype.error = function (msg) {
        if (this.options && this.options.log) {
            this.options.log.error(msg);
        }
        else {
            console.error(msg);
        }
    };
    /**
     * Start the web page renderer.
     * For performance reasons this can be reused to render multiple pages.
     */
    WebPageRenderer.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var nightmareOptions, Nightmare;
            return __generator(this, function (_a) {
                nightmareOptions = {
                    show: this.options && this.options.showBrowser,
                    frame: this.options && this.options.showBrowser,
                    height: 100000,
                    width: 100000,
                    maxHeight: 1000000,
                    maxWidth: 1000000,
                    waitTimeout: this.options && this.options.waitTimeout,
                    gotoTimeout: this.options && this.options.gotoTimeout,
                    openDevTools: this.options && this.options.openDevTools,
                };
                if (this.options) {
                    if (this.options.electronPath) {
                        // Include Electron path if specified.
                        nightmareOptions.electronPath = this.options.electronPath;
                    }
                    if (this.options.env) {
                        // Include Electron environment variables if specified.
                        nightmareOptions.env = this.options.env;
                    }
                }
                Nightmare = require("nightmare");
                this.nightmare = new Nightmare(nightmareOptions);
                this.nightmare.on('crashed', function (evt) {
                    throw new Error("Nightmare crashed " + evt.toString());
                });
                this.nightmare.on('page', function (type, message, stack) {
                    if (type === "error") {
                        _this.error("Browser page error: " + message);
                        _this.error(stack);
                    }
                });
                this.nightmare.on("did-fail-load", function (event, errorCode, errorDescription, validatedURL, isMainFrame) {
                    _this.error("Browser page failed to load.");
                    _this.error("Error code: " + errorCode);
                    _this.error("Error description: " + errorDescription);
                    _this.error("Validated URL: " + validatedURL);
                    _this.error("Is main frame: " + isMainFrame);
                });
                this.nightmare.on('console', function (type, message) {
                    if (type === 'log') {
                        _this.info('LOG: ' + message);
                        return;
                    }
                    if (type === 'warn') {
                        _this.warn('LOG: ' + message);
                        return;
                    }
                    if (type === 'error') {
                        _this.error("Browser JavaScript error:");
                        _this.error(message);
                    }
                });
                return [2 /*return*/];
            });
        });
    };
    /**
     * Finish the chart renderer.
     */
    WebPageRenderer.prototype.end = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.nightmare.end()];
                    case 1:
                        _a.sent();
                        this.nightmare = null;
                        return [2 /*return*/];
                }
            });
        });
    };
    //
    // Check current setup prior to doing any rendering.
    //
    WebPageRenderer.prototype.preRenderCheck = function (options) {
        if (!options.waitSelector) {
            throw new Error("'waitSelector' not specified in the options, please set this to element that must appear in the DOM before the capture is invoked.");
        }
        if (!this.nightmare) {
            throw new Error("WebPageRenderer: Nightmare headless browser is not instantiated, please call `start` before calling `renderImage`.");
        }
    };
    /**
     * Render a web page to an image file.
     */
    WebPageRenderer.prototype.renderImage = function (webPageUrl, outputFilePath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.preRenderCheck(options);
                        this.nightmare.goto(webPageUrl);
                        this.nightmare.wait(options.waitSelector);
                        return [4 /*yield*/, this.nightmare.evaluate(function () {
                                var body = document.querySelector('body');
                                return {
                                    width: body.scrollWidth,
                                    height: body.scrollHeight,
                                };
                            })
                                .then(function (bodySize) {
                                return _this.nightmare.viewport(bodySize.width, bodySize.height);
                            })
                                .then(function () {
                                return _this.nightmare.evaluate(function (captureSelector) {
                                    var element = document.querySelector(captureSelector);
                                    var rect = element.getBoundingClientRect();
                                    return {
                                        x: Math.ceil(rect.left),
                                        y: Math.ceil(rect.top),
                                        height: Math.ceil(rect.bottom - rect.top),
                                        width: Math.ceil(rect.right - rect.left),
                                    };
                                }, options.captureSelector || options.waitSelector);
                            })
                                .then(function (rect) {
                                return _this.nightmare.screenshot(outputFilePath, rect);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Render a web page to a PDF file.
     */
    WebPageRenderer.prototype.renderPDF = function (webPageUrl, outputFilePath, options) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.preRenderCheck(options);
                        this.nightmare.goto(webPageUrl);
                        this.nightmare.wait(options.waitSelector);
                        return [4 /*yield*/, this.nightmare.evaluate(function () {
                                var body = document.querySelector("body");
                                return {
                                    documentArea: {
                                        width: body.scrollWidth,
                                        height: body.scrollHeight
                                    },
                                };
                            })
                                .then(function (pageDetails) {
                                var printOptions = {
                                    marginsType: 0,
                                    // The size of each page. These values match the specification for the A4 page size standard, but in landscape.
                                    //TODO: This should be configurable somehow.
                                    pageSize: {
                                        width: 297000,
                                        height: 210000,
                                    },
                                    landscape: true,
                                };
                                return _this.nightmare
                                    .viewport(pageDetails.documentArea.width, pageDetails.documentArea.height)
                                    .pdf(outputFilePath, printOptions);
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return WebPageRenderer;
}());
exports.WebPageRenderer = WebPageRenderer;
//# sourceMappingURL=web-page-renderer.js.map