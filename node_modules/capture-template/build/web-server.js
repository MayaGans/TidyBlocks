"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var express = require("express");
var http = require("http");
var path = require("path");
/**
 * Web-server component. Serves the chart interative chart.
 */
var WebServer = /** @class */ (function () {
    function WebServer(portNo, log) {
        /**
         * The Express server instance that implements the web-server.
         */
        this.server = null;
        /**
         * The data that defines the chart.
         * Passed to the browser-based chart via REST API.
         */
        this.chartDef = {};
        this.requestedPortNo = portNo;
        this.assignedPortNo = portNo;
        this.log = log;
    }
    /**
     * Log an error message.
     */
    WebServer.prototype.error = function (msg) {
        if (this.log) {
            this.log.error(msg);
        }
        else {
            console.error(msg);
        }
    };
    /**
     * Get the URL to access the web-sever.
     */
    WebServer.prototype.getUrl = function () {
        return "http://127.0.0.1:" + this.assignedPortNo;
    };
    //
    // Load a file from the template, caching it as necesary.
    //
    WebServer.prototype.loadTemplateFile = function (template, cache, url) {
        return __awaiter(this, void 0, void 0, function () {
            var cachedFileContent, fileSystemPath, templateFile, expandedFileContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        cachedFileContent = cache[url];
                        if (cachedFileContent) {
                            return [2 /*return*/, cachedFileContent];
                        }
                        fileSystemPath = path.join.apply(path, url.split('/'));
                        templateFile = template.find(fileSystemPath);
                        if (!templateFile) {
                            throw new Error("Couldn't find file '" + url + "' in template.");
                        }
                        return [4 /*yield*/, templateFile.expand()];
                    case 1:
                        expandedFileContent = _a.sent();
                        cache[url] = expandedFileContent;
                        return [2 /*return*/, expandedFileContent];
                }
            });
        });
    };
    /**
     * Start the web-server.
     */
    WebServer.prototype.start = function (data, template) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            var app = express();
            _this.server = http.createServer(app);
            var fileCache = {};
            app.use("/", function (request, response, next) { return __awaiter(_this, void 0, void 0, function () {
                var fileName, fileContent, err_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            _a.trys.push([0, 2, , 3]);
                            fileName = request.url === "/"
                                ? "index.html"
                                : request.url;
                            return [4 /*yield*/, this.loadTemplateFile(template, fileCache, fileName)];
                        case 1:
                            fileContent = _a.sent();
                            response.send(fileContent);
                            return [3 /*break*/, 3];
                        case 2:
                            err_1 = _a.sent();
                            this.error("Error loading template file.");
                            this.error(err_1 && err_1.stack || err_1);
                            response.sendStatus(404);
                            return [3 /*break*/, 3];
                        case 3: return [2 /*return*/];
                    }
                });
            }); });
            _this.server.listen(_this.requestedPortNo, "127.0.0.1", function (err) {
                if (err) {
                    reject(err);
                }
                else {
                    _this.assignedPortNo = _this.server.address().port;
                    resolve();
                }
            });
        });
    };
    /**
     * Stop the web-server.
     */
    /*async*/ WebServer.prototype.stop = function () {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.server.close(function (err) {
                _this.server = null;
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    };
    return WebServer;
}());
exports.WebServer = WebServer;
//# sourceMappingURL=web-server.js.map