"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var template_renderer_1 = require("./template-renderer");
var yargs_1 = require("yargs");
var fs = require("fs-extra");
var path = require("path");
var promisify = require('promisify-any');
//
// Initalise the template renderer.
//
function initTemplateRenderer(templatePath, data, port, options) {
    return __awaiter(this, void 0, void 0, function () {
        var templateRenderer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    templateRenderer = new template_renderer_1.TemplateRenderer(options);
                    return [4 /*yield*/, templateRenderer.start()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, templateRenderer.loadTemplate(templatePath, data, port)];
                case 2:
                    _a.sent();
                    return [2 /*return*/, templateRenderer];
            }
        });
    });
}
//
// Deinit the template renderer.
//
function deinitTemplateRenderer(templateRenderer, options) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (options && options.leaveBrowserOpen) {
                        return [2 /*return*/]; // Leave the browser open for debugging.
                    }
                    return [4 /*yield*/, templateRenderer.unloadTemplate()];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, templateRenderer.end()];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//
// Expand a template web page and capture it to an image file.
//
function captureImage(templatePath, data, outputPath, options) {
    return __awaiter(this, void 0, void 0, function () {
        var autoAssignPortNo, templateRenderer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs.ensureDir(path.dirname(outputPath))];
                case 1:
                    _a.sent();
                    autoAssignPortNo = 0;
                    return [4 /*yield*/, initTemplateRenderer(templatePath, data, autoAssignPortNo, options)];
                case 2:
                    templateRenderer = _a.sent();
                    return [4 /*yield*/, templateRenderer.renderImage(outputPath)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, deinitTemplateRenderer(templateRenderer, options)];
                case 4:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.captureImage = captureImage;
//
// Expand a template web page and capture it to a PDF file.
//
function capturePDF(templatePath, data, outputPath, options) {
    return __awaiter(this, void 0, void 0, function () {
        var autoAssignPortNo, templateRenderer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, fs.ensureDir(path.dirname(outputPath))];
                case 1:
                    _a.sent();
                    autoAssignPortNo = 0;
                    return [4 /*yield*/, initTemplateRenderer(templatePath, data, autoAssignPortNo, options)];
                case 2:
                    templateRenderer = _a.sent();
                    return [4 /*yield*/, templateRenderer.renderPDF(outputPath)];
                case 3:
                    _a.sent();
                    return [4 /*yield*/, deinitTemplateRenderer(templateRenderer, options)];
                case 4:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
exports.capturePDF = capturePDF;
// 
// Load test data from the template directory.
//
function loadTestData(templatePath) {
    return __awaiter(this, void 0, void 0, function () {
        var testDataFilePath, testDataExists, testDataFileContent, testData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    testDataFilePath = path.join(templatePath, "test-data.json");
                    return [4 /*yield*/, fs.pathExists(testDataFilePath)];
                case 1:
                    testDataExists = _a.sent();
                    if (!testDataExists) {
                        throw new Error("To test your template you need a test-data.json in your template directory.");
                    }
                    return [4 /*yield*/, promisify(fs.readFile)(testDataFilePath, "utf8")];
                case 2:
                    testDataFileContent = _a.sent();
                    testData = JSON.parse(testDataFileContent);
                    return [2 /*return*/, testData];
            }
        });
    });
}
//
// Inflate the web page template and start a web server for testing in browser.
//
function cli_serve(templatePath, port) {
    return __awaiter(this, void 0, void 0, function () {
        var testData, templateRenderer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadTestData(templatePath)];
                case 1:
                    testData = _a.sent();
                    return [4 /*yield*/, initTemplateRenderer(templatePath, testData, port)];
                case 2:
                    templateRenderer = _a.sent();
                    console.log("Point your browser at " + templateRenderer.getUrl());
                    return [2 /*return*/];
            }
        });
    });
}
//
// Capture an image from a web page template using the command line.
//
function cli_captureImage(templatePath, outputPath) {
    return __awaiter(this, void 0, void 0, function () {
        var testData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadTestData(templatePath)];
                case 1:
                    testData = _a.sent();
                    return [4 /*yield*/, captureImage(templatePath, testData, outputPath)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//
// Capture a PDF from a web page template using the command line.
//
function cli_capturePDF(templatePath, outputPath) {
    return __awaiter(this, void 0, void 0, function () {
        var testData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, loadTestData(templatePath)];
                case 1:
                    testData = _a.sent();
                    return [4 /*yield*/, capturePDF(templatePath, testData, outputPath)];
                case 2:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
//
// Basic test run.
//
function testRun() {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, captureImage("test-template/image", {
                        msg: "Hello computer",
                        color: "blue",
                    }, "test-output/test-image.png")];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    });
}
if (require.main === module) {
    if (yargs_1.argv._.length === 0) {
        throw new Error("Expected a command of serve, capture-image or capture-pdf");
    }
    var cmd = yargs_1.argv._[0];
    if (cmd === "test") {
        console.log("Test run...");
        testRun()
            .then(function () { return console.log("Done"); })
            .catch(function (err) { return console.error(err && err.stack || err); });
    }
    else if (cmd === "serve") {
        if (!yargs_1.argv.template) {
            throw new Error("Expected argument --template=<path-to-your-web-page-template>");
        }
        if (!yargs_1.argv.port) {
            throw new Error("Expected argument --port=<web-server-port-no>");
        }
        cli_serve(yargs_1.argv.template, yargs_1.argv.port)
            .catch(function (err) { return console.error(err && err.stack || err); });
    }
    else if (cmd === "capture-image") {
        if (!yargs_1.argv.template) {
            throw new Error("Expected argument --template=<path-to-your-web-page-template>");
        }
        if (!yargs_1.argv.out) {
            throw new Error("Expected argument --out=<path-to-your-output-file>");
        }
        cli_captureImage(yargs_1.argv.template, yargs_1.argv.out)
            .catch(function (err) { return console.error(err && err.stack || err); });
    }
    else if (cmd === "capture-pdf") {
        if (!yargs_1.argv.template) {
            throw new Error("Expected argument --template=<path-to-your-web-page-template>");
        }
        if (!yargs_1.argv.out) {
            throw new Error("Expected argument --out=<path-to-your-output-file>");
        }
        cli_capturePDF(yargs_1.argv.template, yargs_1.argv.out)
            .catch(function (err) { return console.error(err && err.stack || err); });
    }
    else {
        throw new Error("Unknown command: " + cmd);
    }
}
//# sourceMappingURL=index.js.map