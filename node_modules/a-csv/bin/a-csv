#!/usr/bin/env node

// Dependencies
var CSV = require("../lib")
  , CLP = require("clp")
  , Logger = require("bug-killer")
  , Pack = require("../package.json")
  , Fs = require("fs-plus")
  , IsThere = require("is-there")
  ;

// Configure logger
Logger.config.logLevel = 2;
Logger.config.displayDate = false;

// Create the CLP options
var delimiterOpt = new CLP.Option(["d", "delimiter"], "The CSV delimiter", "delimiter", ",")
  , lengthOpt = new CLP.Option(["l", "length"], "The buffer size.", "length", 1024 * 8)
  , charsetOpt = new CLP.Option(["c", "charset"], "The file charset", "charset", "utf8")
  , headersOpt = new CLP.Option(["i", "ignore-headers"], "Ignore the first line in the input file.")
  , sourceOpt = new CLP.Option(["s", "source"], "The source csv file.", "path")
  , verboseOpt = new CLP.Option(["verbose"], "Display additional log messages.")
  , parser = new CLP({
        name: "A CSV"
      , exe: Pack.name
      , process: true
      , version: Pack.version
      , docs_url: Pack.homepage
      , examples: [
            "a-csv -s path/to/file.csv"
          , "a-csv -s path/to/file.csv -i"
          , "a-csv -s path/to/file.csv -l 2048"
          , "a-csv -s path/to/file.csv -c ascii"
        ]
    }, [lengthOpt, charsetOpt, headersOpt, sourceOpt, verboseOpt])
  ;

// Validate length
if (lengthOpt.is_provided && isNaN(lengthOpt.value = parseInt(lengthOpt.value))) {
    return Logger.log("Invalid length value.", "error");
}

// Validate the file path
if (!sourceOpt.is_provided) {
    return Logger.log("Missing the input file.", "error");
} else {
    sourceOpt.value = Fs.absolute(sourceOpt.value);
    if (!IsThere(sourceOpt.value)) {
        return Logger.log("The input file doesn't exist.", "error");
    }
}

// Increase the log level
if (verboseOpt.is_provided) {
    ++Logger.config.logLevel;
}

var rows = []
  , start = new Date().getTime()
  , count = Number(headersOpt.is_provided || 0)
  ;

// Parse the file
CSV.parse(sourceOpt.value, {
    length: lengthOpt.value
  , charset: charsetOpt.value
  , headers:  headersOpt.is_provided
}, function (err, row, next, bytes) {
    if (err) { return Logger.log(err, "error"); }
    if (row !== null) {
        ++count;
        rows.push(row);
        next();
    } else {
        Logger.log(count + " rows parsed in "+ ((new Date().getTime() - start) / 1000).toFixed(5) + "s (" + (bytes / 1000000).toFixed(4) + "MB)", "info");
        Logger.log("Result:", "info");
        console.log(JSON.stringify(rows, null, 2));
    }
});
