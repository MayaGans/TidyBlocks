/**
 * Represents an expanded file in a template.
 */
export interface ITemplateFile {
    /**
     * Relative path of the file within the template folder.
     */
    readonly relativePath: string;
    /**
     * Get the pull path of the template file in the template assets directory.
     */
    getFullPath(): string;
    /**
     * Expand the files content filling in gaps with data.
     */
    expand(): Promise<string>;
    /**
     * Expand and output the file to the output path.
     *
     * @param outputPath The path to output the file to.
     */
    export(outputPath: string): Promise<void>;
}
export declare class TemplateFile implements ITemplateFile {
    private allowExpand;
    private data;
    private templateAssetsPath;
    private fileContent?;
    private expandedContent?;
    /**
     * The name of the file.
     */
    readonly relativePath: string;
    constructor(data: any, relativeFilePath: string, templateAssetsPath: string, allowExpand: boolean, fileContent?: string);
    /**
     * Get the pull path of the template file in the template assets directory.
     */
    getFullPath(): string;
    private loadContent();
    /**
     * Expand the files content filling in gaps with data.
     */
    expand(): Promise<string>;
    /**
     * Expand and output the file to the output path.
     *
     * @param outputPath The path to output the file to.
     */
    export(outputPath: string): Promise<void>;
}
/**
 * Represents an inflated template.
 */
export interface ITemplate {
    /**
     * Files contained in the inflated template.
     */
    files: ITemplateFile[];
    /**
     * Finds a file by name and returns it.
     * Returns null if the file doesn't exist.
     *
     * @param fileName Name of the file to find.
     */
    find(fileName: string): ITemplateFile | null;
    /**
     * Expand and export the template to a directory on disk.
     *
     * @param outputPath The path of the directory export the template to.
     */
    export(outputPath: string): Promise<void>;
}
export declare class Template implements ITemplate {
    private templatePath;
    private data;
    private options?;
    files: ITemplateFile[];
    constructor(templatePath: string, data: any, options?: IInflateOptions);
    private inflateInMemoryFiles(templateAssetsDirectoryPath);
    readFiles(): Promise<void>;
    /**
     * Finds a file by name and returns it.
     * Returns null if the file doesn't exist.
     *
     * @param fileName Name of the file to find.
     */
    find(fileName: string): ITemplateFile | null;
    /**
     * Expand and export the template to a directory on disk.
     *
     * @param outputPath The path of the directory export the template to.
     */
    export(outputPath: string): Promise<void>;
}
/**
 * A file whose content is already loaded in memory.
 */
export interface IInMemoryFile {
    /**
     * The name of the file.
     */
    file: string;
    /**
     * The content of the file.
     */
    content: string;
}
/**
 * Options for inflating a template.
 */
export interface IInflateOptions {
    /**
     * Files that are already loaded into memory.
     */
    inMemoryFiles?: IInMemoryFile[];
}
/**
 * Options for exporting a template.
 */
export interface IExportOptions extends IInflateOptions {
    /**
     * Set to true to clean the existing export directory before writting the new one.
     */
    clean?: boolean;
    /**
     * Set to true to allow the output path to be overwritten.
     * Defaults to false.
     */
    overwrite?: boolean;
}
/**
 * Inflate a template in memory.
 *
 * @param templatePath The path to load the template from.
 * @param data The data to expand the template.
 * @param options Various options.
 *
 * @returns An inflated template.
 */
export declare function inflateTemplate(templatePath: string, data: any, options?: IInflateOptions): Promise<ITemplate>;
/**
 * Do a full export. Inflate the specified template with data and write all expanded files to the
 * specified output directory.
 *
 * @param templatePath The path to load the template from.
 * @param data The data to expand the template.
 * @param outputPath The path to output expanded files to.
 * @param options Various options.
 */
export declare function exportTemplate(templatePath: string, data: any, outputPath: string, options?: IExportOptions): Promise<void>;
