"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var utils_1 = require("./utils");
var util_1 = require("util");
//
// Expands a chart definition so that chart renderer plugins have less work to do.
//
function expandAxisConfig(axisConfig) {
    var expandedAxisConfig = Object.assign({}, axisConfig);
    if (utils_1.isString(expandedAxisConfig.label)) {
        expandedAxisConfig.label = {
            text: expandedAxisConfig.label,
        };
    }
    return expandedAxisConfig;
}
exports.expandAxisConfig = expandAxisConfig;
function expandXAxisConfig(axisConfig) {
    var expandedAxisConfig = expandAxisConfig(axisConfig);
    return expandedAxisConfig;
}
exports.expandXAxisConfig = expandXAxisConfig;
function expandYAxisConfig(axisConfig) {
    var expandedAxisConfig = expandAxisConfig(axisConfig);
    return expandedAxisConfig;
}
exports.expandYAxisConfig = expandYAxisConfig;
function expandSeriesConfig(series) {
    if (utils_1.isString(series)) {
        return {
            series: series,
        };
    }
    else {
        var inputSeriesConfig = series;
        var expandedSeriesConfig = {
            series: inputSeriesConfig.series,
        };
        if (inputSeriesConfig.label) {
            expandedSeriesConfig.label = inputSeriesConfig.label;
        }
        if (inputSeriesConfig.format) {
            expandedSeriesConfig.format = inputSeriesConfig.format;
        }
        if (inputSeriesConfig.color) {
            expandedSeriesConfig.color = inputSeriesConfig.color;
        }
        return expandedSeriesConfig;
    }
}
exports.expandSeriesConfig = expandSeriesConfig;
function expandYSeriesConfig(series) {
    var expanded = expandSeriesConfig(series);
    if (!utils_1.isString(series)) {
        if (series.x) {
            expanded.x = expandSeriesConfig(series.x);
        }
    }
    return expanded;
}
exports.expandYSeriesConfig = expandYSeriesConfig;
function expandYSeriesConfigArray(series) {
    if (!series) {
        return [];
    }
    if (utils_1.isString(series)) {
        return [{
                series: series,
            }];
    }
    if (util_1.isArray(series)) {
        return series.map(expandYSeriesConfig);
    }
    if (util_1.isObject(series)) {
        return [
            expandYSeriesConfig(series),
        ];
    }
    throw new Error("Unexpected type for series: " + series + ".");
}
exports.expandYSeriesConfigArray = expandYSeriesConfigArray;
function expandAxisMap(axisMap, columns) {
    var expandedAxisMap = Object.assign({}, axisMap);
    if (axisMap.x) {
        expandedAxisMap.x = expandSeriesConfig(axisMap.x);
    }
    expandedAxisMap.y = expandYSeriesConfigArray(axisMap.y);
    expandedAxisMap.y2 = expandYSeriesConfigArray(axisMap.y2);
    return expandedAxisMap;
}
exports.expandAxisMap = expandAxisMap;
function expandPlotConfig(plotConfig) {
    var expandedPlotConfig = Object.assign({}, plotConfig);
    if (plotConfig.x) {
        expandedPlotConfig.x = expandAxisConfig(plotConfig.x);
    }
    if (plotConfig.y) {
        expandedPlotConfig.y = expandYAxisConfig(plotConfig.y);
    }
    if (plotConfig.y2) {
        expandedPlotConfig.y2 = expandYAxisConfig(plotConfig.y2);
    }
    return expandedPlotConfig;
}
exports.expandPlotConfig = expandPlotConfig;
function expandChartDef(data, plotConfig, axisMap) {
    return {
        data: data,
        plotConfig: expandPlotConfig(plotConfig),
        axisMap: expandAxisMap(axisMap, data.columnOrder),
    };
}
exports.expandChartDef = expandChartDef;
//# sourceMappingURL=expand-chart-def.js.map