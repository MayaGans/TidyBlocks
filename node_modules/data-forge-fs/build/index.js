"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var data_forge_1 = require("data-forge");
var dataForge = require("data-forge");
/**
 * @hidden
 * Packages a dataframe ready for serialization to a CSV format text file.
 */
var CsvSerializer = /** @class */ (function () {
    function CsvSerializer(dataframe) {
        this.dataframe = dataframe;
    }
    /**
     * Serialize the dataframe to the CSV data format and save it as a text file in the local file system.
     * Asynchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @return Returns a promise that resolves when the file has been written.
     *
     *
     * @example
     * <pre>
     *
     * await df.asCSV().writeFile("my-data-file.csv");
     * </pre>
     */
    CsvSerializer.prototype.writeFile = function (filePath) {
        var _this = this;
        chai_1.assert.isString(filePath, "Expected 'filePath' parameter to 'DataFrame.asCSV().writeFile' to be a string that specifies the path of the file to write to the local file system.");
        return new Promise(function (resolve, reject) {
            var fs = require('fs');
            fs.writeFile(filePath, _this.dataframe.toCSV(), function (err) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    };
    /**
     * Serialize the dataframe to the CSV data format and save it as a text file in the local file system.
     * Synchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @example
     * <pre>
     *
     * df.asCSV().writeFileSync("my-data-file.csv");
     * </pre>
     */
    CsvSerializer.prototype.writeFileSync = function (filePath) {
        chai_1.assert.isString(filePath, "Expected 'filePath' parameter to 'DataFrame.asCSV().writeFileSync' to be a string that specifies the path of the file to write to the local file system.");
        var fs = require('fs');
        fs.writeFileSync(filePath, this.dataframe.toCSV());
    };
    return CsvSerializer;
}());
/**
 * @hidden
 * Packages a dataframe ready for serialization to a JSON format text file.
 */
var JsonSerializer = /** @class */ (function () {
    function JsonSerializer(dataframe) {
        this.dataframe = dataframe;
    }
    /**
     * Serialize the dataframe to the JSON data format and save it as a text file in the local file system.
     * Asynchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @return Returns a promise that resolves when the file has been written.
     *
     *
     * @example
     * <pre>
     *
     * await df.asJSON().writeFile("my-data-file.json");
     * </pre>
     */
    JsonSerializer.prototype.writeFile = function (filePath) {
        var _this = this;
        chai_1.assert.isString(filePath, "Expected 'filePath' parameter to 'DataFrame.asJSON().writeFile' to be a string that specifies the path of the file to write to the local file system.");
        return new Promise(function (resolve, reject) {
            var fs = require('fs');
            fs.writeFile(filePath, _this.dataframe.toJSON(), function (err) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve();
            });
        });
    };
    /**
     * Serialize the dataframe to the JSON data format and save it as a text file in the local file system.
     * Synchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @example
     * <pre>
     *
     * df.asJSON().writeFileSync("my-data-file.json");
     * </pre>
     */
    JsonSerializer.prototype.writeFileSync = function (filePath) {
        chai_1.assert.isString(filePath, "Expected 'filePath' parameter to 'DataFrame.asJSON().writeFile' to be a string that specifies the path of the file to write to the local file system.");
        var fs = require('fs');
        fs.writeFileSync(filePath, this.dataframe.toJSON());
    };
    return JsonSerializer;
}());
/**
 * Treat the dataframe as CSV data for purposes of serialization.
 * This is the first step you need in serializing a dataframe to a CSV data file.
 *
 * @return Returns a {@link ICsvSerializer} that represents the dataframe for serialization in the CSV format. Call `writeFile` or `writeFileSync` to output the CSV data to a text file.
 *
 * @example
 * <pre>
 *
 * df.asCSV().writeFileSync("my-data-file.csv");
 * </pre>
 *
 * @example
 * <pre>
 *
 * await df.asCSV().writeFile("my-data-file.csv");
 * </pre>
 */
function asCSV() {
    return new CsvSerializer(this);
}
exports.asCSV = asCSV;
/**
 * Treat the dataframe as JSON data for purposes of serialization.
 * This is the first step you need in serializing a dataframe to a JSON data file.
 *
 * @return Returns a {@link IJsonSerializer} that represents the dataframe for serialization in the JSON format. Call `writeFile` or `writeFileSync` to output the JSON data to a text file.
 *
 * @example
 * <pre>
 *
 * df.asJSON().writeFileSync("my-data-file.json");
 * </pre>
 *
 * @example
 * <pre>
 *
 * await df.asJSON().writeFile("my-data-file.json");
 * </pre>
 */
function asJSON() {
    return new JsonSerializer(this);
}
exports.asJSON = asJSON;
data_forge_1.DataFrame.prototype.asCSV = asCSV;
data_forge_1.DataFrame.prototype.asJSON = asJSON;
//
// Promise-based read file.
//
function readFileData(filePath) {
    return new Promise(function (resolve, reject) {
        var fs = require('fs');
        fs.readFile(filePath, 'utf8', function (err, fileData) {
            if (err) {
                reject(err);
                return;
            }
            resolve(fileData);
        });
    });
}
/**
 * @hidden
 * Reads a file asynchonrously to a dataframe.
 */
var AsyncFileReader = /** @class */ (function () {
    function AsyncFileReader(filePath) {
        this.filePath = filePath;
    }
    /**
     * Deserialize a CSV file to a DataFrame.
     * Returns a promise that later resolves to a DataFrame.
     *
     * @param [config] Optional configuration file for parsing.
     *
     * @returns Returns a promise of a dataframe loaded from the file.
     *
     * @example
     * <pre>
     *
     * const df = await dataForge.readFile("my-data-file.csv").parseCSV();
     * </pre>
     *
     * @example
     * <pre>
     *
     * const options = {
     *      // ...
     * };
     * const df = await dataForge.readFile("my-data-file.csv").parseCSV(options);
     * </pre>
     */
    AsyncFileReader.prototype.parseCSV = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var fileData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (config) {
                            chai_1.assert.isObject(config, "Expected optional 'config' parameter to dataForge.readFile(...).parseCSV(...) to be an object with configuration options for CSV parsing.");
                        }
                        return [4 /*yield*/, readFileData(this.filePath)];
                    case 1:
                        fileData = _a.sent();
                        return [2 /*return*/, data_forge_1.fromCSV(fileData, config)];
                }
            });
        });
    };
    /**
     * Deserialize a JSON file to a DataFrame.
     * Returns a promise that later resolves to a DataFrame.
     *
     * @returns Returns a promise of a dataframe loaded from the file.
     *
     * @example
     * <pre>
     *
     * const df = await dataForge.readFile("my-data-file.json").parseJSON();
     * </pre>
     */
    AsyncFileReader.prototype.parseJSON = function () {
        return __awaiter(this, void 0, void 0, function () {
            var fileData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, readFileData(this.filePath)];
                    case 1:
                        fileData = _a.sent();
                        return [2 /*return*/, data_forge_1.fromJSON(fileData)];
                }
            });
        });
    };
    return AsyncFileReader;
}());
/**
 * @hidden
 * Reads a file synchonrously to a dataframe.
 */
var SyncFileReader = /** @class */ (function () {
    function SyncFileReader(filePath) {
        this.filePath = filePath;
    }
    /**
     * Deserialize a CSV file to a DataFrame.
     *
     * @param [config] Optional configuration file for parsing.
     *
     * @returns Returns a dataframe that was deserialized from the file.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("my-data-file.csv").parseCSV();
     * </pre>
     *
     * @example
     * <pre>
     *
     * const options = {
     *      // ...
     * };
     * const df = dataForge.readFileSync("my-data-file.csv").parseCSV(options);
     * </pre>
     */
    SyncFileReader.prototype.parseCSV = function (config) {
        if (config) {
            chai_1.assert.isObject(config, "Expected optional 'config' parameter to dataForge.readFileSync(...).parseCSV(...) to be an object with configuration options for CSV parsing.");
        }
        var fs = require('fs');
        return data_forge_1.fromCSV(fs.readFileSync(this.filePath, 'utf8'), config);
    };
    /**
     * Deserialize a JSON file to a DataFrame.
     *
     * @param [config] Optional configuration file for parsing.
     *
     * @returns Returns a dataframe that was deserialized from the file.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("my-data-file.json").parseJSON();
     * </pre>
     */
    SyncFileReader.prototype.parseJSON = function () {
        var fs = require('fs');
        return data_forge_1.fromJSON(fs.readFileSync(this.filePath, 'utf8'));
    };
    return SyncFileReader;
}());
/**
 * Read a file asynchronously from the file system.
 * Works in Nodejs, doesn't work in the browser.
 *
 * @param filePath The path to the file to read.
 *
 * @returns Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.
 *
 * @example
 * <pre>
 *
 * const df = await dataForge.readFile("my-data-file.csv").parseCSV();
 * </pre>
 *
 * @example
 * <pre>
 *
 * const options = {
 *      // ...
 * };
 * const df = await dataForge.readFile("my-data-file.csv").parseCSV(options);
 * </pre>
 *
 * @example
 * <pre>
 *
 * const df = await dataForge.readFile("my-data-file.json").parseJSON();
 * </pre>
 */
function readFile(filePath) {
    chai_1.assert.isString(filePath, "Expected 'filePath' parameter to dataForge.readFile to be a string that specifies the path of the file to read.");
    return new AsyncFileReader(filePath);
}
exports.readFile = readFile;
/**
 * Read a file synchronously from the file system.
 * Works in Nodejs, doesn't work in the browser.
 *
 * @param filePath The path to the file to read.
 *
 * @returns Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.
 *
 * @memberOf Data-Forge
 *
 * @example
 * <pre>
 *
 * const df = dataForge.readFileSync("my-data-file.csv").parseCSV();
 * </pre>
 *
 * @example
 * <pre>
 *
 * const options = {
 *      // ...
 * };
 * const df = dataForge.readFileSync("my-data-file.csv").parseCSV(options);
 * </pre>
 *
 * @example
 * <pre>
 *
 * const df = dataForge.readFileSync("my-data-file.json").parseJSON();
 * </pre>
 */
function readFileSync(filePath) {
    chai_1.assert.isString(filePath, "Expected 'filePath' parameter to dataForge.readFileSync to be a string that specifies the path of the file to read.");
    return new SyncFileReader(filePath);
}
exports.readFileSync = readFileSync;
//
// Patch in the plugin module.
// This feels a bit dodgey, but it works!
// 
dataForge.readFile = readFile;
dataForge.readFileSync = readFileSync;
//# sourceMappingURL=index.js.map