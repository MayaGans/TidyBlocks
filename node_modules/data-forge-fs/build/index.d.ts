import { IDataFrame, ICSVOptions } from 'data-forge';
/**
 * Packages a dataframe ready for serialization to a CSV format text file.
 */
export interface ICsvSerializer {
    /**
     * Serialize the dataframe to the CSV data format and save it as a text file in the local file system.
     * Asynchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @return Returns a promise that resolves when the file has been written.
     *
     *
     * @example
     * <pre>
     *
     * await df.asCSV().writeFile("my-data-file.csv");
     * </pre>
     */
    writeFile(filePath: string): Promise<void>;
    /**
     * Serialize the dataframe to the CSV data format and save it as a text file in the local file system.
     * Synchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @example
     * <pre>
     *
     * df.asCSV().writeFileSync("my-data-file.csv");
     * </pre>
     */
    writeFileSync(filePath: string): void;
}
/**
 * Packages a dataframe ready for serialization to a JSON format text file.
 */
export interface IJsonSerializer {
    /**
     * Serialize the dataframe to the JSON data format and save it as a text file in the local file system.
     * Asynchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @return Returns a promise that resolves when the file has been written.
     *
     *
     * @example
     * <pre>
     *
     * await df.asJSON().writeFile("my-data-file.json");
     * </pre>
     */
    writeFile(filePath: string): Promise<void>;
    /**
     * Serialize the dataframe to the JSON data format and save it as a text file in the local file system.
     * Synchronous version using the Node.js 'fs' module.
     *
     * @param filePath Specifies the path for the output file.
     *
     * @example
     * <pre>
     *
     * df.asJSON().writeFileSync("my-data-file.json");
     * </pre>
     */
    writeFileSync(filePath: string): void;
}
declare module "data-forge/build/lib/dataframe" {
    /**
     * Interface that represents a dataframe.
     * A dataframe contains an indexed sequence of data records.
     * Think of it as a spreadsheet or CSV file in memory.
     *
     * Each data record contains multiple named fields, the value of each field represents one row in a column of data.
     * Each column of data is a named {@link Series}.
     * You think of a dataframe a collection of named data series.
     *
     * @typeparam IndexT The type to use for the index.
     * @typeparam ValueT The type to use for each row/data record.
     */
    interface IDataFrame<IndexT, ValueT> {
        /**
         * Treat the dataframe as CSV data for purposes of serialization.
         * This is the first step you need in serializing a dataframe to a CSV data file.
         *
         * @return Returns a {@link ICsvSerializer} that represents the dataframe for serialization in the CSV format. Call `writeFile` or `writeFileSync` to output the CSV data to a text file.
         *
         * @example
         * <pre>
         *
         * df.asCSV().writeFileSync("my-data-file.csv");
         * </pre>
         *
         * @example
         * <pre>
         *
         * await df.asCSV().writeFile("my-data-file.csv");
         * </pre>
         */
        asCSV(): ICsvSerializer;
        /**
         * Treat the dataframe as JSON data for purposes of serialization.
         * This is the first step you need in serializing a dataframe to a JSON data file.
         *
         * @return Returns a {@link IJsonSerializer} that represents the dataframe for serialization in the JSON format. Call `writeFile` or `writeFileSync` to output the JSON data to a text file.
         *
         * @example
         * <pre>
         *
         * df.asJSON().writeFileSync("my-data-file.json");
         * </pre>
         *
         * @example
         * <pre>
         *
         * await df.asJSON().writeFile("my-data-file.json");
         * </pre>
         */
        asJSON(): IJsonSerializer;
    }
    /**
     * Class that represents a dataframe.
     * A dataframe contains an indexed sequence of data records.
     * Think of it as a spreadsheet or CSV file in memory.
     *
     * Each data record contains multiple named fields, the value of each field represents one row in a column of data.
     * Each column of data is a named {@link Series}.
     * You think of a dataframe a collection of named data series.
     *
     * @typeparam IndexT The type to use for the index.
     * @typeparam ValueT The type to use for each row/data record.
     */
    interface DataFrame<IndexT, ValueT> {
        /**
         * Treat the dataframe as CSV data for purposes of serialization.
         * This is the first step you need in serializing a dataframe to a CSV data file.
         *
         * @return Returns a {@link ICsvSerializer} that represents the dataframe for serialization in the CSV format. Call `writeFile` or `writeFileSync` to output the CSV data to a text file.
         *
         * @example
         * <pre>
         *
         * df.asCSV().writeFileSync("my-data-file.csv");
         * </pre>
         *
         * @example
         * <pre>
         *
         * await df.asCSV().writeFile("my-data-file.csv");
         * </pre>
         */
        asCSV(): ICsvSerializer;
        /**
         * Treat the dataframe as JSON data for purposes of serialization.
         * This is the first step you need in serializing a dataframe to a JSON data file.
         *
         * @return Returns a {@link IJsonSerializer} that represents the dataframe for serialization in the JSON format. Call `writeFile` or `writeFileSync` to output the JSON data to a text file.
         *
         * @example
         * <pre>
         *
         * df.asJSON().writeFileSync("my-data-file.json");
         * </pre>
         *
         * @example
         * <pre>
         *
         * await df.asJSON().writeFile("my-data-file.json");
         * </pre>
         */
        asJSON(): IJsonSerializer;
    }
}
/**
 * Treat the dataframe as CSV data for purposes of serialization.
 * This is the first step you need in serializing a dataframe to a CSV data file.
 *
 * @return Returns a {@link ICsvSerializer} that represents the dataframe for serialization in the CSV format. Call `writeFile` or `writeFileSync` to output the CSV data to a text file.
 *
 * @example
 * <pre>
 *
 * df.asCSV().writeFileSync("my-data-file.csv");
 * </pre>
 *
 * @example
 * <pre>
 *
 * await df.asCSV().writeFile("my-data-file.csv");
 * </pre>
 */
export declare function asCSV<IndexT, ValueT>(this: IDataFrame<IndexT, ValueT>): ICsvSerializer;
/**
 * Treat the dataframe as JSON data for purposes of serialization.
 * This is the first step you need in serializing a dataframe to a JSON data file.
 *
 * @return Returns a {@link IJsonSerializer} that represents the dataframe for serialization in the JSON format. Call `writeFile` or `writeFileSync` to output the JSON data to a text file.
 *
 * @example
 * <pre>
 *
 * df.asJSON().writeFileSync("my-data-file.json");
 * </pre>
 *
 * @example
 * <pre>
 *
 * await df.asJSON().writeFile("my-data-file.json");
 * </pre>
 */
export declare function asJSON<IndexT, ValueT>(this: IDataFrame<IndexT, ValueT>): IJsonSerializer;
/**
 * Reads a file asynchonrously to a dataframe.
 */
export interface IAsyncFileReader {
    /**
     * Deserialize a CSV file to a DataFrame.
     * Returns a promise that later resolves to a DataFrame.
     *
     * @param [config] Optional configuration file for parsing.
     *
     * @returns Returns a promise of a dataframe loaded from the file.
     *
     * @example
     * <pre>
     *
     * const df = await dataForge.readFile("my-data-file.csv").parseCSV();
     * </pre>

     * @example
     * <pre>
     *
     * const options = {
     *      // ...
     * };
     * const df = await dataForge.readFile("my-data-file.csv").parseCSV(options);
     * </pre>
     */
    parseCSV(config?: ICSVOptions): Promise<IDataFrame<number, any>>;
    /**
     * Deserialize a JSON file to a DataFrame.
     * Returns a promise that later resolves to a DataFrame.
     *
     * @returns Returns a promise of a dataframe loaded from the file.
     *
     * @example
     * <pre>
     *
     * const df = await dataForge.readFile("my-data-file.json").parseJSON();
     * </pre>
     */
    parseJSON(): Promise<IDataFrame<number, any>>;
}
/**
 * Reads a file synchonrously to a dataframe.
 */
export interface ISyncFileReader {
    /**
     * Deserialize a CSV file to a DataFrame.
     *
     * @param [config] Optional configuration file for parsing.
     *
     * @returns Returns a dataframe that was deserialized from the file.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("my-data-file.csv").parseCSV();
     * </pre>

     * @example
     * <pre>
     *
     * const options = {
     *      // ...
     * };
     * const df = dataForge.readFileSync("my-data-file.csv").parseCSV(options);
     * </pre>
     */
    parseCSV(config?: ICSVOptions): IDataFrame<number, any>;
    /**
     * Deserialize a JSON file to a DataFrame.
     *
     * @returns {DataFrame} Returns a dataframe that was deserialized from the file.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("my-data-file.json").parseJSON();
     * </pre>
     */
    parseJSON(): IDataFrame<number, any>;
}
declare module "data-forge" {
    /**
     * Read a file asynchronously from the file system.
     * Works in Nodejs, doesn't work in the browser.
     *
     * @param filePath The path to the file to read.
     *
     * @returns Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.
     *
     * @example
     * <pre>
     *
     * const df = await dataForge.readFile("my-data-file.csv").parseCSV();
     * </pre>

     * @example
     * <pre>
     *
     * const options = {
     *      // ...
     * };
     * const df = await dataForge.readFile("my-data-file.csv").parseCSV(options);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const df = await dataForge.readFile("my-data-file.json").parseJSON();
     * </pre>
     */
    function readFile(filePath: string): IAsyncFileReader;
    /**
     * Read a file synchronously from the file system.
     * Works in Nodejs, doesn't work in the browser.
     *
     * @param filePath The path to the file to read.
     *
     * @returns Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("my-data-file.csv").parseCSV();
     * </pre>

     * @example
     * <pre>
     *
     * const options = {
     *      // ...
     * };
     * const df = dataForge.readFileSync("my-data-file.csv").parseCSV(options);
     * </pre>
     *
     * @example
     * <pre>
     *
     * const df = dataForge.readFileSync("my-data-file.json").parseJSON();
     * </pre>
     */
    function readFileSync(filePath: string): ISyncFileReader;
}
/**
 * Read a file asynchronously from the file system.
 * Works in Nodejs, doesn't work in the browser.
 *
 * @param filePath The path to the file to read.
 *
 * @returns Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.
 *
 * @example
 * <pre>
 *
 * const df = await dataForge.readFile("my-data-file.csv").parseCSV();
 * </pre>
 *
 * @example
 * <pre>
 *
 * const options = {
 *      // ...
 * };
 * const df = await dataForge.readFile("my-data-file.csv").parseCSV(options);
 * </pre>
 *
 * @example
 * <pre>
 *
 * const df = await dataForge.readFile("my-data-file.json").parseJSON();
 * </pre>
 */
export declare function readFile(filePath: string): IAsyncFileReader;
/**
 * Read a file synchronously from the file system.
 * Works in Nodejs, doesn't work in the browser.
 *
 * @param filePath The path to the file to read.
 *
 * @returns Returns an object that represents the file. Use `parseCSV` or `parseJSON` to deserialize to a DataFrame.
 *
 * @memberOf Data-Forge
 *
 * @example
 * <pre>
 *
 * const df = dataForge.readFileSync("my-data-file.csv").parseCSV();
 * </pre>
 *
 * @example
 * <pre>
 *
 * const options = {
 *      // ...
 * };
 * const df = dataForge.readFileSync("my-data-file.csv").parseCSV(options);
 * </pre>
 *
 * @example
 * <pre>
 *
 * const df = dataForge.readFileSync("my-data-file.json").parseJSON();
 * </pre>
 */
export declare function readFileSync(filePath: string): ISyncFileReader;
